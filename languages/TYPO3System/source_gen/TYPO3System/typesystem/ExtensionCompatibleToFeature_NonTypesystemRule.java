package TYPO3System.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class ExtensionCompatibleToFeature_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public ExtensionCompatibleToFeature_NonTypesystemRule() {
  }

  public void applyRule(final SNode extensionRef_stock, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode system = SNodeOperations.getAncestor(extensionRef_stock, "TYPO3System.structure.TYPO3System", false, false);


    if (1 > 2) {
      final Wrappers._T<SNode> errorFt = new Wrappers._T<SNode>(null);

      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(extensionRef_stock, "extension", false), "incompatibleFeatures", true)).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode it) {

          ListSequence.fromList(SLinkOperations.getTargets(system, "Features", true)).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it2) {
              if (SPropertyOperations.getString(SLinkOperations.getTarget(it2, "feature", false), "id") == SPropertyOperations.getString(SLinkOperations.getTarget(it, "feature", false), "id")) {
                errorFt.value = it2;
              }
            }
          });

        }
      });

      if (errorFt.value != null) {
        // <node> 
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "TYPO3Stock.structure.ExtensionRef";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
